{"version":3,"file":"trichi.module.js","sources":["../../node_modules/wasm-feature-detect/dist/esm/index.js","../../../src/trichi.ts"],"sourcesContent":["export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob(\"AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA=\"),(e=>e.codePointAt(0))),{},{builtins:[\"js-string\"]}),!0}catch(e){return!1}})(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)(),typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();\n","import {threads} from 'wasm-feature-detect';\n\n/**\n * Tuning parameters for generating triangle cluster hierarchies\n */\nexport interface Params {\n    /**\n     * The maximum number of vertices per cluster.\n     */\n    maxVerticesPerCluster: number,\n\n    /**\n     * The maximum number of triangles per cluster.\n     */\n    maxTrianglesPerCluster: number,\n\n    /**\n     * A weighting factor for the importance of cluster normal cones used when building the clusters.\n     * In range [0..1].\n     */\n    clusterConeWeight: number,\n\n    /**\n     * The target number of clusters per group.\n     */\n    targetClustersPerGroup: number,\n\n    /**\n     * The maximum number of iterations when building the hierarchy.\n     * In each iteration, the number of triangles is approximately halved.\n     */\n    maxHierarchyDepth: number,\n\n    /**\n     * The size of the thread pool used for parallelizing DAG building steps.\n     * If `trichi` is not built with multithreading enabled, this is ignored.\n     * If this is 0, defaults to 1.\n     */\n    threadPoolSize: number,\n}\n\n/**\n * A triangle cluster hierarchy\n */\nexport interface TriangleClusterHierarchy {\n    /**\n     * The model's vertex indices\n     */\n    indices: Uint32Array,\n\n    /**\n     * The model's vertices\n     */\n    vertices: Float32Array,\n\n    /**\n     * Error bounds of clusters.\n     * Used for LOD selection.\n     *\n     * For each cluster this stores 10 floats: its parent group's error (first 5 floats) and its own error (second 5 floats)\n     * Each error bound stores:\n     *  - the bounding sphere's center                      3 floats\n     *  - the bounding sphere's radius                      1 float\n     *  - the cluster's absolute simplification error       1 float\n     */\n    errors: Float32Array,\n\n    /**\n     * Bounds of clusters.\n     * Used for cluster culling.\n     *\n     * For each cluster this stores 4 floats:\n     *  - the cluster's tight bounding sphere's center      3 floats\n     *  - the cluster's tight bounding sphere's radius      1 float\n     */\n    bounds: Float32Array,\n\n    /**\n     * Clusters in the hierarchy.\n     *\n     * Each cluster consists of 4 unsigned integers:\n     *  - the cluster's offset in the array of cluster vertex\n     *  - the cluster's offset in the array of cluster triangles\n     *  - the number of vertex indices used by the cluster\n     *  - the number of triangles in the cluster\n     */\n    clusters: Uint32Array,\n\n    /**\n     * Vertex indices of the clusters in the hierarchy.\n     *\n     * The first and last (exclusive) vertices of a cluster with index c are:\n     *    clusterVertices[clusters[c]], clusterVertices[clusters[c] + clusters[c + 2]\n     */\n    clusterVertices: Float32Array,\n\n    /**\n     * Triangles (triplets of indices into `clusterVertices`) of the clusters in the hierarchy.\n     *\n     * The first and last (exclusive) triangles of a cluster with index c are:\n     *    clusterTriangles[clusters[c + 1], clusterTriangles[clusters[c + 1] + clusters[c + 3] * 3]\n     */\n    clusterTriangles: Uint32Array,\n}\n\nexport interface Trichi {\n    /**\n     * Builds a cluster hierarchy for a given triangle mesh.\n     *\n     * Note that faceted meshes are currently not supported.\n     * It is currently the user's responsibility to ensure the input mesh is contiguous, e.g., by first welding similar vertices.\n     *\n     * @param indices vertex indices of the input mesh\n     * @param vertices vertices of the input mesh - the first 3 floats of a vertex are expected to store the position\n     * @param vertexStrideBytes the size of each vertex in the vertices array in bytes\n     * @param params tuning parameters for building the cluster hierarchy\n     */\n    buildTriangleClusterHierarchy(indices: Uint32Array, vertices: Float32Array, vertexStrideBytes: number, params: Params): TriangleClusterHierarchy,\n\n    /**\n     * Builds a cluster hierarchy for a 3d model given as a file blob.\n     *\n     * This function is currently more for demonstration purposes, as it...\n     *  - ignores vertex attributes: The returned vertices will only contain position data.\n     *  - creates the hierarchy only for the first mesh that is found in the file blob\n     *\n     * @param fileName the name of the file blob, used as a file type hint when loading model data\n     * @param bytes the raw bytes containing the model data\n     * @param params tuning parameters for building the cluster hierarchy\n     */\n    buildTriangleClusterHierarchyFromFileBlob(fileName: string, bytes: Uint8Array, params: Params): TriangleClusterHierarchy,\n}\n\n/**\n * Initializes a {@link Trichi} module.\n *\n * @param maxThreadPoolSize sets the maximum number of threads in the module's thread pool. In environments that do not support multithreading, this is ignored.\n */\nexport default async function initTrichiJs(maxThreadPoolSize: number = navigator.hardwareConcurrency): Promise<Trichi> {\n    const moduleName = (await threads()) ? './wasm/trichi-wasm-threads.js' : './wasm/trichi-wasm.js';\n\n    const module = await import(moduleName) as unknown;\n    // @ts-expect-error we don't care if the module's type is unknown here\n    return new module.default({maxThreads: Math.min(maxThreadPoolSize, navigator.hardwareConcurrency)}) as Promise<Trichi>;\n}\n"],"names":[],"mappings":";AAAY,MAA2iF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,OAAM,WAAW,EAAE,OAAO,cAAc,EAAE,CAAC,IAAI,cAAc,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI,iBAAiqIp1F;;;;AAIG;AACY,eAAe,YAAY,CAAC,iBAAA,GAA4B,SAAS,CAAC,mBAAmB,EAAA;AAChG,IAAA,MAAM,UAAU,GAAG,CAAC,MAAM,OAAO,EAAE,IAAI,+BAA+B,GAAG,uBAAuB,CAAC;AAEjG,IAAA,MAAM,MAAM,GAAG,MAAM,OAAO,UAAU,CAAY,CAAC;;IAEnD,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,CAAC,mBAAmB,CAAC,EAAC,CAAoB,CAAC;AAC3H;;;;","x_google_ignoreList":[0]}